; Copyright (C) 2007-2020, Manuel Meitinger
; This program is free software, distributed under the terms of
; the GNU General Public License Version 2. See the LICENSE file
; at the top of the source tree.

[general]
static=yes              ; Die Datei darf nicht von pbx_config geschrieben werden...
writeprotect=yes        ; ...und auch nicht über die CLI.
clearglobalvars=yes     ; Globale Variablen sollen bei reloads neu eingelesen werden.
userscontext=extensions ; Kontext in dem die hints von der users.conf eingetragen werden.



;===============================================================================
; Globale Variablen
;-------------------------------------------------------------------------------

[globals]
BRANCHES=[24568]               ; Das Muster für die Zweigstellenvorwahl.
BRANCHES_LEN=1                 ; Die Ziffernlänge des Zweigstellenmusters.
BRANCHES_LIST=2,4,5,6,8        ; Eine kommagetrennte Liste aller gültigen Zweigstellenvorwahlen.
COUNTRY_CODE=43                ; Die zu verwendende Länderkennung, kann in extensions_local.conf überschrieben werden.
COUNTRY_PATTERN=ZXXX           ; Das Muster das eine nationale Nummer nach der Länderdurchwahl aufweisen muss.
DEVICES=XXX!                   ; Das Muster für gültige Geräte. Sollte um eine Ziffer länger als das Durchwahlmuster sein und darf nicht mit * beginnen.
EMERGENCIES=1XX!               ; Das Muster für Notrufnummern.
EXTENSION_PROGRAM=0            ; Die Kurzdurchwahl für den Programmaufruf.
EXTENSION_VOICEMAIL=1          ; Die Kurzdurchwahl für die Voicemailabfrage.
EXTENSIONS=XX                  ; Das Muster für alle möglichen Durchwahlen.
EXTENSIONS_LEN=2               ; Die Ziffernlänge des Durchwahlmusters.
LANGUAGE=de                    ; Die für Voicemail zu verwendende Sprache.
PADDING=0                      ; Die Ziffern (nicht Muster!) die Kurzwahlen vorangestellt werden müssen um eine vollständige Durchwahl zu erhalten.
PREFIX_INTERNATIONAL=00        ; Die Vorwahl für internationale Anrufe, kann in extensions_local.conf überschrieben werden.
PREFIX_NATIONAL=0              ; Die Vorwahl für nationale Anrufe, kann in extensions_local.conf überschrieben werden.
PRIVILEGE_DEVICECALL=0         ; Erlaubt die Verwendung von lokalen Geräten.
PRIVILEGE_ECHO=0               ; Erlaubt die Ausführung der Echo-Anwendung.
PRIVILEGE_EXTERNALCALL=0       ; Erlaubt das Anrufen externer Nummern.
PRIVILEGE_REBOOT=0             ; Erlaubt das Neustarten des Servers.
PRIVILEGE_REMOTECALL=0         ; Erlaubt das Anrufen von Nummern in anderen Zweigstellen.
PRIVILEGE_REMOTEPICKUP=0       ; Erlaubt das Entgegennehmen von Anrufen in anderen Zweigstellen.
PRIVILEGE_SETCLOSED=0          ; Erlaubt das Setzen oder Löschen der Zweigstellenschließung.
PRIVILEGE_SETMAILBOX=0         ; Erlaubt das Setzen oder Löschen der Zweigstellenmailbox.
PRIVILEGE_SKIPPASSCODE=0       ; Erlaubt den Zugriff auf beliebige Mailboxen ohne Passwortabfrage.
PRIVILEGE_TRANSFERCALL=0       ; Erlaubt das Transferieren von abgehenden Anrufen.
PROGRAM=dial,program,s         ; Eine Konstante für Gosub-Aufrufe des Zweigstellenprogramms.
TRANSFER_CONTEXT=from-transfer ; Der Kontext in dem Weiterleitungen landen.



;===============================================================================
; Kontexte für Subroutinen
;-------------------------------------------------------------------------------

; Hilfsroutinen
;---------------
[helpers]
exten => assert,  1,Goto(100)
 same =>         50(privilege),Set(LOCAL(ARG1)=${PRIVILEGE_${LOCAL(ARG1)}})
 same =>          n,Goto(100)
 same =>        100,GotoIf(${ISNULL(${LOCAL(ARG1)})}?invalid)
 same =>          n,GotoIf($[${QUOTE(${LOCAL(ARG1)})}="0"]?invalid)
 same =>          n,GotoIf($[${QUOTE(${LOCAL(ARG1)})}="no"]?invalid)
 same =>          n,Return()
 same =>          n(invalid),Playback(pbx-invalid)
 same =>          n,Hangup()
exten => available,  1,Goto(100)
 same =>            50(program),Set(LOCAL(TIMES)=${HOURS})
 same =>             n,Goto(check)
 same =>           100,GotoIf($[!${DIALPLAN_EXISTS(hours,${LOCAL(ARG1)},1)}]?program)
 same =>             n,Gosub(hours,${LOCAL(ARG1)},1)
 same =>             n,Set(LOCAL(TIMES)=${GOSUB_RETVAL})
 same =>             n(check),While(${EXISTS(${SET(LOCAL(TIME)=${SHIFT(LOCAL(TIMES),&)})})})
 same =>             n,GotoIfTime(${LOCAL(TIME)}?available)
 same =>             n,EndWhile()
 same =>             n,Return(0)
 same =>             n(available),Return(1)
exten => closed,  1,Goto(100)
 same =>         50(now),Set(LOCAL(ARG1)=${EPOCH})
 same =>          n,Goto(100)
 same =>        100,GotoIf(${DB_EXISTS(Branch/Closed)}?exists)
 same =>          n,Return(0)
 same =>          n(exists),Return($[${DB_RESULT}>${LOCAL(ARG1)}])
exten => internationalize,  1,Goto(100)
 same =>                   50(cid),Set(LOCAL(ARG1)=${CALLERID(num)})
 same =>                    n,Goto(100)
 same =>                  100,Set(LOCAL(ARG1)=${FILTER(+0123456789,${LOCAL(ARG1)})})
 same =>                    n,Set(LOCAL(ARG1)=${FILTER(+0123456789,${LOCAL(ARG1):0:1})}${FILTER(0123456789,${LOCAL(ARG1):1})})
 same =>                    n,GotoIf($[${LEN(${LOCAL(ARG1)})}<=${EXTENSIONS_LEN}]?tooshort)
 same =>                    n,Return(${IF($["${LOCAL(ARG1):0:${LEN(${PREFIX_INTERNATIONAL})}}"="${PREFIX_INTERNATIONAL}"]?+${LOCAL(ARG1):${LEN(${PREFIX_INTERNATIONAL})}}:${IF($["${LOCAL(ARG1):0:${LEN(${PREFIX_NATIONAL})}}"="${PREFIX_NATIONAL}"]?+${COUNTRY_CODE}${LOCAL(ARG1):${LEN(${PREFIX_NATIONAL})}}:${LOCAL(ARG1)})})})
 same =>                    n(tooshort),Return(${LOCAL(ARG1)})
exten => nationalize,  1,Goto(100)
 same =>              50(cid),Set(LOCAL(ARG1)=${CALLERID(num)})
 same =>               n,Goto(100)
 same =>             100,Set(LOCAL(ARG1)=${FILTER(+0123456789,${LOCAL(ARG1)})})
 same =>               n,Set(LOCAL(ARG1)=${FILTER(+0123456789,${LOCAL(ARG1):0:1})}${FILTER(0123456789,${LOCAL(ARG1):1})})
 same =>               n,GotoIf($[${LEN(${LOCAL(ARG1)})}<=${EXTENSIONS_LEN}]?tooshort)
 same =>               n,Return(${IF($["${LOCAL(ARG1):0:3}"="+${COUNTRY_CODE}"]?${PREFIX_NATIONAL}${LOCAL(ARG1):3}:${IF($["${LOCAL(ARG1):0:1}"="+"]?${PREFIX_INTERNATIONAL}${LOCAL(ARG1):1}:${LOCAL(ARG1)})})})
 same =>               n(tooshort),Return(${LOCAL(ARG1)})

; Anrufroutinen
;---------------
[dial]
exten => direct,  1,Set(LOCAL(ARG2)=)
 same =>          2,Set(LOCAL(ARG3)=rt${IF(${PRIVILEGE_TRANSFERCALL}?T)})
 same =>          3,Goto(100)
 same =>        100,Dial(${LOCAL(ARG1)},${LOCAL(ARG2)},${LOCAL(ARG3)})
 same =>          n,Return(${DIALSTATUS})
exten => in,  1,Goto(100)
 same =>    100,GotoIf(${DIALPLAN_EXISTS(extensions,${LOCAL(ARG1)},1)}?exists)
 same =>      n,Gosub(${PROGRAM})
 same =>      n,Hangup()
 same =>      n(exists),Gosub(helpers,closed,now)
 same =>      n,GotoIf($[${GOSUB_RETVAL}|!${VM_INFO(${LOCAL(ARG1)},exists)}]?novm)
 same =>      n,Gosub(helpers,available,1(${LOCAL(ARG1)}))
 same =>      n,Set(LOCAL(AVAILABLE)=${GOSUB_RETVAL})
 same =>      n,Dial(${HINT(${LOCAL(ARG1)}@extensions)},${IF(${LOCAL(AVAILABLE)}?20:10)},rt)
 same =>      n,Goto(o,voicemail)
 same =>      n(novm),Dial(${HINT(${LOCAL(ARG1)}@extensions)}&LOCAL/in-program@dial,,rt)
 same =>      n,Goto(o,playtones)
exten => in-program,1,Wait(10)
 same =>            n,Gosub(${PROGRAM})
 same =>            n,Hangup()
exten => local,  1,Goto(100)
 same =>       100,GotoIf(${DIALPLAN_EXISTS(extensions,${LOCAL(ARG1)},1)}?exists)
 same =>         n,Hangup(UNALLOCATED)
 same =>         n(exists),Gosub(helpers,available,1(${LOCAL(ARG1)}))
 same =>         n,Set(LOCAL(AVAILABLE)=${GOSUB_RETVAL})
 same =>         n,Dial(${HINT(${LOCAL(ARG1)}@extensions)},${IF(${LOCAL(AVAILABLE)}?20:10)},rt${IF(${PRIVILEGE_TRANSFERCALL}?T)})
 same =>         n,Goto(o,${IF(${VM_INFO(${LOCAL(ARG1)},exists)}?voicemail:playtones)})
exten => out,  1,Set(LOCAL(ARG2)=)
 same =>       2,Goto(100)
 same =>     100,Gosub(helpers,dial-out-string,${IF(${EXISTS(${LOCAL(ARG2)})}?2:1)}(${LOCAL(ARG1)},${LOCAL(ARG2)}))
 same =>       n,Dial(${GOSUB_RETVAL},,r${IF(${PRIVILEGE_TRANSFERCALL}?T)})
 same =>       n,Goto(o,playtones)
exten => program,100(s),Gosub(helpers,closed,now)
 same =>         n,GotoIf(${GOSUB_RETVAL}?closed)
 same =>         n,Gosub(helpers,available,program)
 same =>         n,Set(LOCAL(AVAILABLE)=${GOSUB_RETVAL})
 same =>         n,GosubIf(${LOCAL(AVAILABLE)}?helpers,program,s)
 same =>         n,GotoIf($[!${DB_EXISTS(Branch/Mailbox)}]?novm)
 same =>         n,GotoIf($[!${VM_INFO(${DB_RESULT},exists)}]?novm)
 same =>         n,Playback(aufbauwerk/${IF(${LOCAL(AVAILABLE)}?busy:unavailable)}/leave_msg)
 same =>         n,Set(CHANNEL(language)=${LANGUAGE})
 same =>         n,VoiceMail(${DB_RESULT},s)
 same =>         n,Return()
 same =>         n(novm),Playback(aufbauwerk/${IF(${LOCAL(AVAILABLE)}?busy:unavailable)}/call_again)
 same =>         n,Return()
 same =>         n(closed),Playback(aufbauwerk/closed/until)
 same =>         n,Playback(aufbauwerk/closed/day/${STRFTIME(${DB(Branch/Closed)},,%d)})
 same =>         n,Playback(aufbauwerk/closed/month/${STRFTIME(${DB(Branch/Closed)},,%m)})
 same =>         n,Playback(aufbauwerk/closed/goodbye)
 same =>         n,Return()
exten => remote,  1,Set(LOCAL(ARG2)=from-external)
 same =>          2,Goto(100)
 same =>        100,Set(IAXVAR(CALLERID)=${CALLERID(all)})
 same =>          n,Set(IAXVAR(BLINDTRANSFER)=${BLINDTRANSFER})
 same =>          n,Dial(IAX2/${LOCAL(ARG1):0:${BRANCHES_LEN}}/${LOCAL(ARG1):${BRANCHES_LEN}}:${LOCAL(ARG2)},,${IF(${PRIVILEGE_TRANSFERCALL}?T)})
 same =>          n,Hangup()
exten => transfer,  1,Goto(100)
 same =>          100,GotoIf(${DIALPLAN_EXISTS(extensions,${LOCAL(ARG1)},1)}?exists)
 same =>            n,Playback(pbx-invalid,noanswer)
 same =>            n,Hangup(UNALLOCATED)
 same =>            n(exists),Dial(${HINT(${LOCAL(ARG1)}@extensions)},,rt)
 same =>            n,Goto(o,playtones)
exten => o,1,NoOp(Vermittlungsanforderung)
 same =>   n,Gosub(${PROGRAM})
 same =>   n,Hangup()
 same =>   n(voicemail),NoOp(Nachricht hinterlassen)
 same =>   n,Set(CHANNEL(language)=${LANGUAGE})
 same =>   n,VoiceMail(${LOCAL(ARG1)},${IF(${LOCAL(AVAILABLE)}?b:u)}s)
 same =>   n,Return(${DIALSTATUS})
 same =>   n(playtones),NoOp(Wahlfehler)
 same =>   n,GotoIf($["${DIALSTATUS}"="BUSY"]?busy:congestion)
 same =>   n(busy),Busy(4)
 same =>   n(congestion),Congestion(4)



;===============================================================================
; Erweiterbare Kontexte
;-------------------------------------------------------------------------------

; Stellvertretend annehmbare Nummern
;------------------------------------
[pickup]
exten => _${EXTENSIONS},1,PickupChan(${HINT(${EXTEN}@extensions)},p)

; Eigentliche Anrufsziele
;-------------------------
[extensions]

; Subscribefähige Nummern
;-------------------------
[hints]
include => extensions
exten => _${BRANCHES}${EXTENSIONS},hint,Custom:${EXTEN}

; Erweiterungen
;---------------
#include "extensions_local.conf"



;===============================================================================
; Endpunkte und allgemeine Include-Kontexte
;-------------------------------------------------------------------------------

; Anrufe von außerhalb des Firmennetzwerkes
;-------------------------------------------
[from-external]
include => from-external-local
include => from-external-global

; Zu transferierende Gespräche
;------------------------------
[from-transfer]
include => from-transfer-local
include => from-transfer-global

; Kontext für alle Peers in der users.conf
;------------------------------------------
[from-internal]
include => from-internal-local
include => from-internal-global
include => internal-dial

; Callbackkontext für die Rückruffunktion in VoiceMail
;------------------------------------------------------
[from-voicemail]
include => internal-dial

; Zweigstellenübergreifenden Anrufe
;-----------------------------------
[from-remote]
exten => _${EXTENSIONS}:.,1,NoOp(Eingehende Zweigstellenoperation)
 same =>                  n,Set(CALLERID(all)=${IAXVAR(CALLERID)})
 same =>                  n,Set(BLINDTRANSFER=${IAXVAR(BLINDTRANSFER)})
 same =>                  n,Goto(${EXTEN:$[${EXTENSIONS_LEN}+1]},${EXTEN:0:${EXTENSIONS_LEN}},1)

; Wählt eine allgemeine Nummer
;------------------------------
[internal-dial]
exten => _${EMERGENCIES},1,NoOp(Notruf)
 same =>                 n,Gosub(dial,out,1(${EXTEN}))
 same =>                 n,Hangup()
exten => _+.,1,NoOp(Ausgehender Anruf)
 same =>     n,Set(DIAL=+${FILTER(0123456789,${EXTEN:1})})
 same =>     n,Set(DIAL_LEN=${LEN(${DIAL})})
 same =>     n,Set(LIST=${BRANCHES_LIST})
 same =>     n,While(${EXISTS(${SET(PEER=${SHIFT(LIST)})})})
 same =>     n,Gosub(helpers,internationalize,1(${IAXPEER(${PEER},callerid_num)}))
 same =>     n,Set(BASE=${GOSUB_RETVAL})
 same =>     n,Set(BASE_LEN=${LEN(${BASE})})
 same =>     n,GotoIf($["${BASE}"!="${DIAL:0:${BASE_LEN}}"]?continue)
 same =>     n,GotoIf($[${DIAL_LEN}=${BASE_LEN}]?${PEER}${PADDING}${EXTENSION_PROGRAM},1)
 same =>     n,GotoIf($[${DIAL_LEN}=(${BASE_LEN}+${EXTENSIONS_LEN})]?${PEER}${DIAL:${BASE_LEN}},1)
 same =>     n,Hangup(UNALLOCATED)
 same =>     n(continue),EndWhile()
 same =>     n,Gosub(helpers,assert,privilege(EXTERNALCALL))
 same =>     n,Gosub(helpers,internationalize,cid)
 same =>     n,Set(CALLER=${GOSUB_RETVAL})
 same =>     n,Set(CALLER_LEN=${LEN(${CALLER})})
 same =>     n,Gosub(helpers,internationalize,1(${IAXPEER(${BRANCH},callerid_num)}))
 same =>     n,Set(BASE=${GOSUB_RETVAL})
 same =>     n,Set(BASE_LEN=${LEN(${BASE})})
 same =>     n,Gosub(dial,out,${IF($[${CALLER_LEN}>${BASE_LEN}&"${CALLER:0:${BASE_LEN}}"="${BASE}"]?2(${DIAL},${CALLER:${BASE_LEN}}):1(${DIAL}))})
 same =>     n,Hangup()
exten => _${EXTENSIONS},1,NoOp(Lokaler Anruf)
 same =>                n,Gosub(dial,local,1(${EXTEN}))
 same =>                n,Hangup()
exten => _${BRANCH}${EXTENSIONS},1,Goto(${EXTEN:${BRANCHES_LEN}},1)
exten => _${BRANCHES}${EXTENSIONS},1,NoOp(Ausgehender Zweigstellenanruf)
 same =>                           n,Gosub(helpers,assert,privilege(REMOTECALL))
 same =>                           n,Gosub(dial,remote,2(${EXTEN},${CONTEXT}))
 same =>                           n,Hangup()
exten => _${PREFIX_INTERNATIONAL}ZXXX!,1,Goto(+${FILTER(0123456789,${EXTEN:${LEN(${PREFIX_INTERNATIONAL})}})},1)
exten => _${PREFIX_NATIONAL}${COUNTRY_PATTERN}!,1,Goto(+${COUNTRY_CODE}${FILTER(0123456789,${EXTEN:${LEN(${PREFIX_NATIONAL})}})},1)



;===============================================================================
; Standardkontexterweiterungen
;-------------------------------------------------------------------------------

[from-external-global]
exten => _${EXTENSIONS},1,NoOp(Eingehender Anruf)
 same =>                2,Gosub(helpers,internationalize,cid)
 same =>                3,Set(CALLERID(num)=${GOSUB_RETVAL})
 same =>                4,Answer()
 same =>                5,Gosub(dial,in,1(${EXTEN}))
 same =>                6,Hangup()
exten => ${PADDING}${EXTENSION_PROGRAM},1,NoOp(Programmaufruf)
 same =>                                5,Gosub(${PROGRAM})
exten => ${PADDING}${EXTENSION_VOICEMAIL},1,NoOp(Voicemailabfrage)
 same =>                                  5,VoiceMailMain()

[from-transfer-global]
exten => _${EXTENSIONS},1,NoOp(Lokaler Transfer)
 same =>                n,Gosub(dial,${IF(${EXISTS(${BLINDTRANSFER})}?in:transfer)},1(${EXTEN}))
 same =>                n,Hangup()
exten => _${BRANCH}${EXTENSIONS},1,Goto(${EXTEN:${BRANCHES_LEN}},1)
exten => _${BRANCHES}${EXTENSIONS},1,NoOp(Zweigstellentransfer)
 same =>                           n,Gosub(dial,remote,2(${EXTEN},from-transfer))
 same =>                           n,Hangup()

[from-internal-global]
exten => ${EXTENSION_PROGRAM},1,Goto(${PADDING}${EXTENSION_PROGRAM},1)
exten => ${PADDING}${EXTENSION_PROGRAM},1,NoOp(Programmaufruf)
 same =>                                n,Gosub(${PROGRAM})
 same =>                                n,Hangup()
exten => ${EXTENSION_VOICEMAIL},1,Goto(${PADDING}${EXTENSION_VOICEMAIL},1)
exten => ${PADDING}${EXTENSION_VOICEMAIL},1,NoOp(Voicemailabfrage)
 same =>                                  n,Set(MAILBOX=${REPLACE(PASSTHRU(${SIPPEER(${CHANNEL(peername)},mailbox)}),\,,&)})
 same =>                                  n,VoiceMailMain(${MAILBOX},${IF(${EXISTS(${MAILBOX})}?s)})
 same =>                                  n,Hangup()
exten => _*1*.,1,NoOp(Spezifische Voicemailabfrage)
 same =>       n,GotoIf(${VM_INFO(${EXTEN:3},exists)}?exists)
 same =>       n,Playback(beeperr)
 same =>       n,Hangup()
 same =>       n(exists),VoiceMailMain(${EXTEN:3},${IF(${PRIVILEGE_SKIPPASSCODE}?s)})
 same =>       n,Hangup()
exten => *11,1,NoOp(Schließung abfragen)
 same =>     n,Gosub(helpers,closed,now)
 same =>     n,GotoIf(${GOSUB_RETVAL}?exists)
 same =>     n,Playback(vm-no)
 same =>     n,Hangup()
 same =>     n(exists),Answer()
 same =>     n,SayUnixTime(${DB(Branch/Closed)},,dB)
 same =>     n,Hangup()
exten => _*12*XX*XX,1,NoOp(Schließung setzen)
 same =>        n,Gosub(helpers,assert,privilege(SETCLOSED))
 same =>        n,Set(YEAR=${STRFTIME(${EPOCH},,%Y)})
 same =>        n,Set(MONTH=${EXTEN:7:2})
 same =>        n,Set(DAY=${EXTEN:4:2})
 same =>        n,Set(TIME=${STRPTIME(${YEAR}-${MONTH}-${DAY},,%Y-%m-%d)})
 same =>        n,GotoIf($[${TIME}>${EPOCH}]?set)
 same =>        n,Set(TIME=${STRPTIME($[${YEAR}+1]-${MONTH}-${DAY},,%Y-%m-%d)})
 same =>        n(set),Set(DB(Branch/Closed)=${TIME})
 same =>        n,Playback(beep)
 same =>        n,Hangup()
exten => *13,1,NoOp(Schließung löschen)
 same =>     n,Gosub(helpers,assert,privilege(SETCLOSED))
 same =>     n,NoOp(${DB_DELETE(Branch/Closed)})
 same =>     n,Playback(beep)
 same =>     n,Hangup()
exten => *22,1,NoOp(Mailbox abfragen)
 same =>     n,GotoIf(${DB_EXISTS(Branch/Mailbox)}?exists)
 same =>     n,Playback(vm-no)
 same =>     n,Hangup()
 same =>     n(exists),Answer()
 same =>     n,SayNumber(${DB_RESULT})
 same =>     n,Hangup()
exten => _*23*.,1,NoOp(Mailbox setzen)
 same =>        n,Gosub(helpers,assert,privilege(SETMAILBOX))
 same =>        n,GotoIf(${VM_INFO(${EXTEN:4},exists)}?exists)
 same =>        n,Playback(beeperr)
 same =>        n,Hangup()
 same =>        n(exists),Set(DB(Branch/Mailbox)=${EXTEN:4})
 same =>        n,Playback(beep)
 same =>        n,Hangup()
exten => *24,1,NoOp(Mailbox löschen)
 same =>     n,Gosub(helpers,assert,privilege(SETMAILBOX))
 same =>     n,NoOp(${DB_DELETE(Branch/Mailbox)})
 same =>     n,Playback(beep)
 same =>     n,Hangup()
exten => _***${DEVICES},1,NoOp(Gerätepickup)
 same =>                n,Pickup(*${FILTER(0123456789,${EXTEN:3})}@extensions)
 same =>                n,Hangup()
exten => _**${EXTENSIONS},1,NoOp(Interner Pickup)
 same =>                  n,Goto(pickup,${EXTEN:2},1)
exten => _**${BRANCH}${EXTENSIONS},1,Goto(**${EXTEN:$[2+${BRANCHES_LEN}]},1)
exten => _**${BRANCHES}${EXTENSIONS},1,NoOp(Zweigstellenübergreifender Pickup)
 same =>                             n,Gosub(helpers,assert,privilege(REMOTEPICKUP))
 same =>                             n,Gosub(dial,remote,2(${EXTEN:2},pickup))
 same =>                             n,Hangup()
exten => *3246,1,NoOp(Echoaufruf)
 same =>       n,Gosub(helpers,assert,privilege(ECHO))
 same =>       n,Answer()
 same =>       n,Echo()
 same =>       n,Hangup()
exten => _*${DEVICES},1,NoOp(Geräteanruf)
 same =>              n,Gosub(helpers,assert,privilege(DEVICECALL))
 same =>              n,Gosub(dial,local,1(${EXTEN}))
 same =>              n,Hangup()
